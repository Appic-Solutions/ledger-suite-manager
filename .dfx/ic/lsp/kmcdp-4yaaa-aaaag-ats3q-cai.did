type AddErc20Arg = record {
  contract : Erc20Contract;
  ledger_init_arg : LedgerInitArg;
};
type AddErc20Error = variant {
  TransferIcpError : TransferFromError;
  ChainIdNotSupported : text;
  Erc20TwinTokenAlreadyExists;
  InvalidErc20Contract : text;
  InternalError : text;
};
type CanisterStatusResponse = record {
  status : CanisterStatusType;
  memory_size : nat;
  cycles : nat;
  settings : DefiniteCanisterSettings;
  query_stats : QueryStats;
  idle_cycles_burned_per_day : nat;
  module_hash : opt blob;
  reserved_cycles : nat;
};
type CanisterStatusType = variant { stopped; stopping; running };
type CyclesManagement = record {
  cycles_top_up_increment : nat;
  cycles_for_ledger_creation : nat;
  cycles_for_archive_creation : nat;
  cycles_for_index_creation : nat;
};
type DefiniteCanisterSettings = record {
  freezing_threshold : nat;
  controllers : vec principal;
  reserved_cycles_limit : nat;
  memory_allocation : nat;
  compute_allocation : nat;
};
type Erc20Contract = record { chain_id : nat; address : text };
type InitArg = record {
  minter_ids : vec record { nat; principal };
  cycles_management : opt CyclesManagement;
  more_controller_ids : vec principal;
  twin_ls_creation_fee_appic_token : opt nat;
  twin_ls_creation_fee_icp_token : nat;
};
type InstalledNativeLedgerSuite = record {
  fee : nat;
  decimals : nat8;
  logo : text;
  name : text;
  chain_id : nat;
  ledger_wasm_hash : text;
  ledger : principal;
  index_wasm_hash : text;
  index : principal;
  archives : vec principal;
  symbol : text;
};
type InvalidNativeInstalledCanistersError = variant {
  TokenAlreadyManaged;
  NotAllowed;
  WasmHashError;
  FailedToNotifyAppicHelper;
  AlreadyManagedPrincipals;
};
type LSMarg = variant { Upgrade : UpgradeArg; Init : InitArg };
type LedgerInitArg = record {
  decimals : nat8;
  token_symbol : text;
  transfer_fee : nat;
  token_logo : text;
  token_name : text;
};
type LedgerManagerInfo = record {
  minter_ids : vec record { nat; principal };
  cycles_management : CyclesManagement;
  managed_canisters : vec ManagedCanisters;
  more_controller_ids : vec principal;
  ledger_suite_version : opt LedgerSuiteVersion;
  ls_creation_appic_fee : opt nat;
  ls_creation_icp_fee : nat;
};
type LedgerSuiteVersion = record {
  archive_compressed_wasm_hash : text;
  ledger_compressed_wasm_hash : text;
  index_compressed_wasm_hash : text;
};
type ManagedCanisterIds = record {
  ledger : opt principal;
  index : opt principal;
  archives : vec principal;
};
type ManagedCanisterStatus = variant {
  Created : record { canister_id : principal };
  Installed : record { canister_id : principal; installed_wasm_hash : text };
};
type ManagedCanisters = record {
  erc20_contract : Erc20Contract;
  twin_erc20_token_symbol : text;
  ledger : opt ManagedCanisterStatus;
  index : opt ManagedCanisterStatus;
  archives : vec principal;
};
type QueryStats = record {
  response_payload_bytes_total : nat;
  num_instructions_total : nat;
  num_calls_total : nat;
  request_payload_bytes_total : nat;
};
type Result = variant { Ok; Err : AddErc20Error };
type Result_1 = variant { Ok; Err : InvalidNativeInstalledCanistersError };
type TransferFromError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  InsufficientAllowance : record { allowance : nat };
  BadBurn : record { min_burn_amount : nat };
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  InsufficientFunds : record { balance : nat };
};
type UpdateCyclesManagement = record {
  cycles_top_up_increment : opt nat;
  cycles_for_ledger_creation : opt nat;
  cycles_for_archive_creation : opt nat;
  cycles_for_index_creation : opt nat;
};
type UpdateLedgerSuiteCreationFee = record { icp : nat; appic : opt nat };
type UpgradeArg = record {
  cycles_management : opt UpdateCyclesManagement;
  archive_compressed_wasm_hash : opt text;
  new_minter_ids : opt vec record { nat; principal };
  ledger_compressed_wasm_hash : opt text;
  index_compressed_wasm_hash : opt text;
  twin_ls_creation_fees : opt UpdateLedgerSuiteCreationFee;
};
service : {
  add_erc20_ls : (AddErc20Arg) -> (Result);
  add_native_ls : (InstalledNativeLedgerSuite) -> (Result_1);
  all_twins_canister_ids : () -> (vec ManagedCanisters) query;
  get_canister_status : () -> (CanisterStatusResponse);
  get_lsm_info : () -> (LedgerManagerInfo) query;
  twin_canister_ids_by_contract : (Erc20Contract) -> (
      opt ManagedCanisterIds,
    ) query;
  update_twin_creation_fees : (UpdateLedgerSuiteCreationFee) -> ();
}